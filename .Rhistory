for (j in 1:l){
dLam.Y[j,] <- (fit.cox.Y$cum[j+1,2]-fit.cox.Y$cum[j,2])*exp(Y[,2]*fit.cox.Y$gamma[[1]])
S.t.Y[j,]=exp(-fit.cox.Y$cum[j+1,2]*c(exp(Y[,2]*fit.cox.Y$gamma[[1]])))
}
S.t1.Y=dLam.Y.t1=matrix(0,l1,n)
for (j in 1:l1){
dLam.Y.t1[j,] <-(fit.cox.Y.t1$cum[j+1,2]-fit.cox.Y.t1$cum[j,2])*exp(Y[,1]*fit.cox.Y.t1$gamma[[1]])
S.t1.Y[j,]=exp(-fit.cox.Y.t1$cum[j+1,2]*c(exp(Y[,1]*fit.cox.Y.t1$gamma[[1]])))
}
}
res <-oneStep_rcpp(fut, stime_bef_tau, stime_bef_t1, Y, S.t.Y, dLam.Y, K.t.X, K.t.X[1:l1,],
S.t1.Y, dLam.Y.t1, M.X.wei, S.t.X, dLam.X, M.X.wei[1:l1,],
S.t.X[1:l1,], dLam.X[1:l1,])
return(c(res, hat.beta.t))
}
if(se.method=="boot"){
boot.t <- matrix(NA, nrow= B, ncol = 10)
warn <- rep(0, B)
warn3 <- rep(0, B)
for(i in 1:B){
indices <- sample(c(1:n), size=n, replace=TRUE)
suppressWarnings({
myfun <- function(){
tryCatch({boot.fct(data[indices, ])}, error=function(e){NULL})}
W <- 0
W3 <-0
temp <- withCallingHandlers(myfun(),
warning = function(w){
if(grepl("convergence issue", w$message)|
grepl("coefficient may be infinite", w$message)){
W <<- NA
}
W3 <<-NA
})
})
#if(is.na(W)){temp <- NULL} else{temp <- temp}
if(is.na(W)){warn[i] <- 1}
if(is.na(W3)){warn3[i] <- 1}
if(!is.null(temp)){
boot.t[i, ] <- temp
}
else{
boot.t[i, ] <- rep(NA, 10)
}
}
se.beta.t.boot.all <- matrix(sapply(7:10, function(i){sd(boot.t[,i], na.rm=T)}),ncol=ncol(Z.mat), nrow=2, byrow=T)
se.beta.t.boot <- matrix(sapply(7:10, function(i){sd(boot.t[which(warn==0),i], na.rm=T)}),ncol=ncol(Z.mat), nrow=2, byrow=T)
se.beta.t.boot2 <- matrix(sapply(7:10, function(i){sd(boot.t[which(warn3==0),i], na.rm=T)}),ncol=ncol(Z.mat), nrow=2, byrow=T)
}
colnames(hat.beta.t)<-c("t1","tau")
rownames(se.beta.t)<- c("t1", "tau")
rownames(se.beta.t.boot.all)<- c("t1", "tau")
rownames(se.beta.t.boot)<- c("t1", "tau")
rownames(se.beta.t.boot2)<- c("t1", "tau")
if(model=="A"){
rownames(hat.beta.t) <- c("log_total_fetvol", "methyleret")
colnames(se.beta.t)<-c("log_total_fetvol", "methyleret")
colnames(se.beta.t.boot.all)<-c("log_total_fetvol", "methyleret")
colnames(se.beta.t.boot)<-c("log_total_fetvol", "methyleret")
colnames(se.beta.t.boot2)<-c("log_total_fetvol", "methyleret")
}
if(model=="B"){
rownames(hat.beta.t) <- c("log_total_bvvol", "methyleret")
colnames(se.beta.t)<- c("log_total_bvvol", "methyleret")
colnames(se.beta.t.boot.all)<- c("log_total_bvvol", "methyleret")
colnames(se.beta.t.boot)<- c("log_total_bvvol", "methyleret")
colnames(se.beta.t.boot2)<- c("log_total_bvvol", "methyleret")
}
out.beta <- list("est"=hat.beta.t, "se.EIF" =t(se.beta.t), "se.boot.all"=t(se.beta.t.boot.all),"se.boot"=t(se.beta.t.boot),"se.boot2"=t(se.beta.t.boot2))
out.oneStep <- rbind(data.frame(est=K.est, se.boot.all=sd(boot.t[,1], na.rm=T),
se.boot=sd(boot.t[which(warn==0),1], na.rm=T),
se.boot2=sd(boot.t[which(warn3==0),1], na.rm=T),
boot.low.all=quantile(boot.t[,1],0.025, na.rm=T),
boot.up.all=quantile(boot.t[,1],0.975, na.rm=T),
boot.low=quantile(boot.t[which(warn==0),1],0.025, na.rm=T),
boot.up=quantile(boot.t[which(warn==0),1],0.975, na.rm=T),
boot.low2=quantile(boot.t[which(warn3==0),1],0.025, na.rm=T),
boot.up2=quantile(boot.t[which(warn3==0),1],0.975, na.rm=T),
n.boot.all = length(na.omit(boot.t[,1])),
n.boot=length(na.omit(boot.t[which(warn==0),1])),
n.boot2=length(na.omit(boot.t[which(warn3==0),1]))),
data.frame(est=C.est, se.boot.all=sd(boot.t[,2], na.rm=T),
se.boot=sd(boot.t[which(warn==0),2], na.rm=T),
se.boot2=sd(boot.t[which(warn3==0),2], na.rm=T),
boot.low.all=quantile(boot.t[,2],0.025, na.rm=T),
boot.up.all=quantile(boot.t[,2],0.975, na.rm=T),
boot.low=quantile(boot.t[which(warn==0),2],0.025, na.rm=T),
boot.up=quantile(boot.t[which(warn==0),2],0.975, na.rm=T),
boot.low2=quantile(boot.t[which(warn3==0),2],0.025, na.rm=T),
boot.up2=quantile(boot.t[which(warn3==0),2],0.975, na.rm=T),
n.boot.all = length(na.omit(boot.t[,2])),
n.boot=length(na.omit(boot.t[which(warn==0),2])),
n.boot2=length(na.omit(boot.t[which(warn3==0),2]))),
data.frame(est=AUC.est, se.boot.all=sd(boot.t[,3], na.rm=T),
se.boot=sd(boot.t[which(warn==0),3], na.rm=T),
se.boot2=sd(boot.t[which(warn3==0),3], na.rm=T),
boot.low.all=quantile(boot.t[,3],0.025, na.rm=T),
boot.up.all=quantile(boot.t[,3],0.975, na.rm=T),
boot.low=quantile(boot.t[which(warn==0),3],0.025, na.rm=T),
boot.up=quantile(boot.t[which(warn==0),3],0.975, na.rm=T),
boot.low2=quantile(boot.t[which(warn3==0),3],0.025, na.rm=T),
boot.up2=quantile(boot.t[which(warn3==0),3],0.975, na.rm=T),
n.boot.all = length(na.omit(boot.t[,3])),
n.boot=length(na.omit(boot.t[which(warn==0),3])),
n.boot2=length(na.omit(boot.t[which(warn3==0),3]))),
data.frame(est=GH.est, se.boot.all=sd(boot.t[,4], na.rm=T),
se.boot=sd(boot.t[which(warn==0),4], na.rm=T),
se.boot2=sd(boot.t[which(warn3==0),4], na.rm=T),
boot.low.all=quantile(boot.t[,4],0.025, na.rm=T),
boot.up.all=quantile(boot.t[,4],0.975, na.rm=T),
boot.low=quantile(boot.t[which(warn==0),4],0.025, na.rm=T),
boot.up=quantile(boot.t[which(warn==0),4],0.975, na.rm=T),
boot.low2=quantile(boot.t[which(warn3==0),4],0.025, na.rm=T),
boot.up2=quantile(boot.t[which(warn3==0),4],0.975, na.rm=T),
n.boot.all = length(na.omit(boot.t[,4])),
n.boot=length(na.omit(boot.t[which(warn==0),4])),
n.boot2=length(na.omit(boot.t[which(warn3==0),4]))),
data.frame(est=C.gform.est, se.boot.all=sd(boot.t[,5], na.rm=T),
se.boot=sd(boot.t[which(warn==0),5], na.rm=T),
se.boot2=sd(boot.t[which(warn3==0),5], na.rm=T),
boot.low.all=quantile(boot.t[,5],0.025, na.rm=T),
boot.up.all=quantile(boot.t[,5],0.975, na.rm=T),
boot.low=quantile(boot.t[which(warn==0),5],0.025, na.rm=T),
boot.up=quantile(boot.t[which(warn==0),5],0.975, na.rm=T),
boot.low2=quantile(boot.t[which(warn3==0),5],0.025, na.rm=T),
boot.up2=quantile(boot.t[which(warn3==0),5],0.975, na.rm=T),
n.boot.all = length(na.omit(boot.t[,5])),
n.boot=length(na.omit(boot.t[which(warn==0),5])),
n.boot2=length(na.omit(boot.t[which(warn3==0),5]))),
data.frame(est=AUC.gform.est, se.boot.all=sd(boot.t[,6], na.rm=T),
se.boot=sd(boot.t[which(warn==0),6], na.rm=T),
se.boot2=sd(boot.t[which(warn3==0),6], na.rm=T),
boot.low.all=quantile(boot.t[,6],0.025, na.rm=T),
boot.up.all=quantile(boot.t[,6],0.975, na.rm=T),
boot.low=quantile(boot.t[which(warn==0),6],0.025, na.rm=T),
boot.up=quantile(boot.t[which(warn==0),6],0.975, na.rm=T),
boot.low2=quantile(boot.t[which(warn3==0),6],0.025, na.rm=T),
boot.up2=quantile(boot.t[which(warn3==0),6],0.975, na.rm=T),
n.boot.all = length(na.omit(boot.t[,6])),
n.boot=length(na.omit(boot.t[which(warn==0),6])),
n.boot2=length(na.omit(boot.t[which(warn3==0),6]))))
rownames(out.oneStep) <- c("K_tau", "C_tau", "AUC.t", "GH_tau", "C.gform.tau", "AUC.gform.tau")
return(list("oneStep"=out.oneStep, "beta"=out.beta))
}
M<-500
est <- Matrix(NA, ncol=M, nrow=6)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1000, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
est[i,]<-fit$oneStep
print(i)
}
M<-500
est <- Matrix(NA, ncol=M, nrow=6)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
est[i,]<-fit$oneStep
print(i)
}
est[1,]
est <- Matrix(NA, ncol=6, nrow=M)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
est[,]<-fit$oneStep
print(i)
}
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
fit$oneStep
fit$oneStep$est
M<-500
est <- Matrix(NA, ncol=6, nrow=M)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
est[,]<-fit$oneStep$est
print(i)
}
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
fit$oneStep$est
M<-500
est <- Matrix(NA, ncol=6, nrow=M)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
est[i,]<-fit$oneStep$est
print(i)
}
apply(est, 2, mean)
apply(est, 2, mean, na.rm=T)
View(est)
M<-500
est <- Matrix(NA, ncol=6, nrow=M)
est[1,]
fit$oneStep$est
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
est[i,]<-fit$oneStep$est
print(i)
}
M<-500
est <- Matrix(NA, ncol=6, nrow=M)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
est[i,]<-as.numeric(fit$oneStep$est)
print(i)
}
M<-500
res <- Matrix(NA, ncol=6, nrow=M)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
res[i,]<-as.numeric(fit$oneStep$est)
print(i)
}
View(res)
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
as.numeric(fit$oneStep$est)
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
as.numeric(fit$oneStep$est)
fit$oneStep
i
View(res)
res <- Matrix(NA, 500, 6)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
res[i,] <- as.numeric(fit$oneStep$est)
print(i)
}
res <- Matrix(NA, 500, 6)
res
M<-500
res <- Matrix(NA, 500, 6)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
res[i,] <- as.numeric(fit$oneStep$est)
print(i)
}
apply(res, 2, mean)
apply(res, 2, mean, na.rm=T)
res
M<-500
res <- matrix(NA, 500, 6)
for(i in 1:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
res[i,] <- as.numeric(fit$oneStep$est)
print(i)
}
truth <- readRDS("C:/Users/mcn456/Documents/GitHub/concordance2/results_new/truth_modA_new.RDS")
apply(est, 2, mean, na.rm=T)
res
apply(res, 2, mean, na.rm=T)
for(i in 4:M){
data <- simBrain(n=300, indCens = FALSE, model="A", tau=1)
fit <-tryCatch({oneStep.HAL(data, tau=1, t=0.5, se.method="boot",
B=1, method="HAL", model="A", indCens = FALSE,
bins.X.C=5,
bins.X.T=5,
bins.Y.t=5,
bins.Y.tau=6,
bins.T.X=6,
bins.T.Y.t=6,
bins.T.Y.tau=7,
bins.C=6)}, error=function(e){NULL})
res[i,] <- as.numeric(fit$oneStep$est)
print(i)
}
truth <- readRDS("C:/Users/mcn456/Documents/GitHub/concordance2/results_new/truth_modA_new.RDS")
apply(res, 2, mean, na.rm=T)
apply(res, 2, mean, na.rm=T)-truth
setwd("~/GitHub/NASH-mediation")
# packages
# ---------------------------------------------------------------------
library(targets)
library(tarchetypes)
tar_make()
library(data.table)
table2 <- targets::tar_read(table2)
setDT(table2)
table2[, .(est.sde=mean(est.sde), bias.sde = mean(est.sde-sde.true), sd.sde=sd(est.sde), se.sde=mean(se.sde), cov.sde = mean((sde.true < est.sde + qnorm(0.975)*se.sde) & (sde.true > est.sde - qnorm(0.975)*se.sde)), est.sie=mean(est.sie), bias.sie = mean(est.sie-sie.true), sd.sie=sd(est.sie), se.sie=mean(se.sie), cov.sie = mean((sie.true < est.sie + qnorm(0.975)*se.sie) & (sie.true > est.sie - qnorm(0.975)*se.sie)), est.oe=mean(est.oe), bias.oe = mean(est.oe-oe.true), sd.oe=sd(est.oe), se.oe=mean(se.oe), cov.oe = mean((oe.true < est.oe + qnorm(0.975)*se.oe) & (oe.true > est.oe - qnorm(0.975)*se.oe))), by=.(n, mis)]
table2 <- targets::tar_read(table2new)
setDT(table2)
table2[, .(est.sde=mean(est.sde), bias.sde = mean(est.sde-sde.true), sd.sde=sd(est.sde), se.sde=mean(se.sde), cov.sde = mean((sde.true < est.sde + qnorm(0.975)*se.sde) & (sde.true > est.sde - qnorm(0.975)*se.sde)), est.sie=mean(est.sie), bias.sie = mean(est.sie-sie.true), sd.sie=sd(est.sie), se.sie=mean(se.sie), cov.sie = mean((sie.true < est.sie + qnorm(0.975)*se.sie) & (sie.true > est.sie - qnorm(0.975)*se.sie)), est.oe=mean(est.oe), bias.oe = mean(est.oe-oe.true), sd.oe=sd(est.oe), se.oe=mean(se.oe), cov.oe = mean((oe.true < est.oe + qnorm(0.975)*se.oe) & (oe.true > est.oe - qnorm(0.975)*se.oe))), by=.(n, mis)]
table1 <- targets::tar_read(table1)
setDT(table1)
table1[, .(n=mean(n), est.sde=mean(est.sde), bias.sde = mean(est.sde-sde.true), sd.sde=sd(est.sde), se.sde=mean(se.sde), cov.sde = mean((sde.true < est.sde + qnorm(0.975)*se.sde) & (sde.true > est.sde - qnorm(0.975)*se.sde)), est.sie=mean(est.sie), bias.sie = mean(est.sie-sie.true), sd.sie=sd(est.sie), se.sie=mean(se.sie), cov.sie = mean((sie.true < est.sie + qnorm(0.975)*se.sie) & (sie.true > est.sie - qnorm(0.975)*se.sie)), est.oe=mean(est.oe), bias.oe = mean(est.oe-oe.true), sd.oe=sd(est.oe), se.oe=mean(se.oe), cov.oe = mean((oe.true < est.oe + qnorm(0.975)*se.oe) & (oe.true > est.oe - qnorm(0.975)*se.oe)), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[est.pm>-40 & est.pm<40, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(rm.outlier(se.pm)), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[est.pm>-40 & est.pm<40, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[est.pm>-4 & est.pm<4, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
tableD2 <- targets::tar_read(tableD2)
setDT(tableD2)
tableD2[, .(n=mean(n),est.sde=mean(est.sde, na.rm=T), bias.sde = mean(est.sde-sde.true, na.rm=T), sd.sde=sd(est.sde, na.rm=T), se.sde=mean(se.sde, na.rm=T), cov.sde = mean((sde.true < est.sde + qnorm(0.975)*se.sde) & (sde.true > est.sde - qnorm(0.975)*se.sde), na.rm=T), est.sie=mean(est.sie, na.rm=T), bias.sie = mean(est.sie-sie.true, na.rm=T), sd.sie=sd(est.sie, na.rm=T), se.sie=mean(se.sie), cov.sie = mean((sie.true < est.sie + qnorm(0.975)*se.sie) & (sie.true > est.sie - qnorm(0.975)*se.sie)), est.oe=mean(est.oe), bias.oe = mean(est.oe-oe.true), sd.oe=sd(est.oe), se.oe=mean(se.oe), cov.oe = mean((oe.true < est.oe + qnorm(0.975)*se.oe) & (oe.true > est.oe - qnorm(0.975)*se.oe))), by=tar_group]
tableD2[, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
tableD2 <- targets::tar_read(tableD2)
setDT(tableD2)
tableD2[, .(n=mean(n),est.sde=mean(est.sde, na.rm=T), bias.sde = mean(est.sde-sde.true, na.rm=T), sd.sde=sd(est.sde, na.rm=T), se.sde=mean(se.sde, na.rm=T), cov.sde = mean((sde.true < est.sde + qnorm(0.975)*se.sde) & (sde.true > est.sde - qnorm(0.975)*se.sde), na.rm=T), est.sie=mean(est.sie, na.rm=T), bias.sie = mean(est.sie-sie.true, na.rm=T), sd.sie=sd(est.sie, na.rm=T), se.sie=mean(se.sie), cov.sie = mean((sie.true < est.sie + qnorm(0.975)*se.sie) & (sie.true > est.sie - qnorm(0.975)*se.sie)), est.oe=mean(est.oe), bias.oe = mean(est.oe-oe.true), sd.oe=sd(est.oe), se.oe=mean(se.oe), cov.oe = mean((oe.true < est.oe + qnorm(0.975)*se.oe) & (oe.true > est.oe - qnorm(0.975)*se.oe))), by=tar_group]
boxplot(tableD2[tar_group==3, est.pm])
boxplot(tableD2[tar_group==3, est.pm])
boxplot(tableD2[tar_group==3, est.pm])
boxplot(tableD2[tar_group==3 & est.pm<100, est.pm])
boxplot(tableD2[tar_group==2 & est.pm<100, est.pm])
tableD2[abs(est.pm)<100, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
tableD2[abs(est.pm)<50, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1 <- targets::tar_read(table1)
setDT(table1)
table1[, .(n=mean(n), est.sde=mean(est.sde), bias.sde = mean(est.sde-sde.true), sd.sde=sd(est.sde), se.sde=mean(se.sde), cov.sde = mean((sde.true < est.sde + qnorm(0.975)*se.sde) & (sde.true > est.sde - qnorm(0.975)*se.sde)), est.sie=mean(est.sie), bias.sie = mean(est.sie-sie.true), sd.sie=sd(est.sie), se.sie=mean(se.sie), cov.sie = mean((sie.true < est.sie + qnorm(0.975)*se.sie) & (sie.true > est.sie - qnorm(0.975)*se.sie)), est.oe=mean(est.oe), bias.oe = mean(est.oe-oe.true), sd.oe=sd(est.oe), se.oe=mean(se.oe), cov.oe = mean((oe.true < est.oe + qnorm(0.975)*se.oe) & (oe.true > est.oe - qnorm(0.975)*se.oe)), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[est.pm>-4 & est.pm<4, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table(table1$est.pm>4)
table(table1[tar_group==1, est.pm]>4)
table(table1[tar_group==3, est.pm]>4)
table(table1[tar_group==5, est.pm]>4)
table(table1[tar_group==8, est.pm]>4)
table1[tar_group==2, mean(est.sde/est.oe)]
table1[tar_group==1, mean(est.sde/est.oe)]
table1[tar_group==1, mean(est.sie/est.oe)]
table1[, est.pm2=est.sde/est.oe]
table1[, est.pm2.=est.sde/est.oe]
table1[, est.pm2:=est.sde/est.oe]
table(est.pm2=est.pm)
table1[, table(est.pm2==est.pm)]
table1 <- targets::tar_read(table1)
setDT(table1)
table1[, .(n=mean(n), est.sde=mean(est.sde), bias.sde = mean(est.sde-sde.true), sd.sde=sd(est.sde), se.sde=mean(se.sde), cov.sde = mean((sde.true < est.sde + qnorm(0.975)*se.sde) & (sde.true > est.sde - qnorm(0.975)*se.sde)), est.sie=mean(est.sie), bias.sie = mean(est.sie-sie.true), sd.sie=sd(est.sie), se.sie=mean(se.sie), cov.sie = mean((sie.true < est.sie + qnorm(0.975)*se.sie) & (sie.true > est.sie - qnorm(0.975)*se.sie)), est.oe=mean(est.oe), bias.oe = mean(est.oe-oe.true), sd.oe=sd(est.oe), se.oe=mean(se.oe), cov.oe = mean((oe.true < est.oe + qnorm(0.975)*se.oe) & (oe.true > est.oe - qnorm(0.975)*se.oe)), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[est.pm>-4 & est.pm<4, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
0/0
table1[, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[abs(est.pm<100), .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[abs(est.pm)<100, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[abs(est.pm)<50, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[abs(est.pm)<5, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[abs(est.pm)<5, .(n=mean(n), est.pm=mean(est.pm), bias.pm = mean(est.pm-pm.true), sd.pm=sd(est.pm), se.pm=mean(se.pm), cov.pm = mean((pm.true < est.pm + qnorm(0.975)*se.pm) & (pm.true > est.pm - qnorm(0.975)*se.pm))), by=tar_group]
table1[, .(n=mean(n), est.sde=mean(est.ORsde), bias.sde = mean(est.ORsde-sde.OR.true), sd.sde=sd(est.ORsde), se.sde=mean(se.ORsde), cov.sde = mean((sde.OR.true < est.ORsde + qnorm(0.975)*se.ORsde) & (sde.OR.true > est.ORsde - qnorm(0.975)*se.ORsde)), est.sie=mean(est.ORsie), bias.sie = mean(est.ORsie-sie.OR.true), sd.sie=sd(est.ORsie), se.sie=mean(se.ORsie), cov.sie = mean((sie.OR.true < est.ORsie + qnorm(0.975)*se.ORsie) & (sie.OR.true > est.ORsie - qnorm(0.975)*se.ORsie)), est.oe=mean(est.ORoe), bias.oe = mean(est.ORoe-oe.OR.true), sd.oe=sd(est.ORoe), se.oe=mean(se.ORoe), cov.oe = mean((oe.OR.true < est.ORoe + qnorm(0.975)*se.ORoe) & (oe.OR.true > est.ORoe - qnorm(0.975)*se.ORoe))), by=tar_group]
table1[, .(n=mean(n), est.sde=mean(est.logORsde), bias.sde = mean(est.logORsde-sde.logOR.true), sd.sde=sd(est.logORsde), se.sde=mean(se.logORsde), cov.sde = mean((sde.logOR.true < est.logORsde + qnorm(0.975)*se.logORsde) & (sde.logOR.true > est.logORsde - qnorm(0.975)*se.logORsde)), est.sie=mean(est.logORsie), bias.sie = mean(est.logORsie-sie.logOR.true), sd.sie=sd(est.logORsie), se.sie=mean(se.logORsie), cov.sie = mean((sie.logOR.true < est.logORsie + qnorm(0.975)*se.logORsie) & (sie.logOR.true > est.logORsie - qnorm(0.975)*se.logORsie)), est.oe=mean(est.logORoe), bias.oe = mean(est.logORoe-oe.logOR.true), sd.oe=sd(est.logORoe), se.oe=mean(se.logORoe), cov.oe = mean((oe.logOR.true < est.logORoe + qnorm(0.975)*se.logORoe) & (oe.logOR.true > est.logORoe - qnorm(0.975)*se.logORoe))), by=tar_group]
tableD2[, .(n=mean(n), est.sde=mean(est.logORsde), bias.sde = mean(est.logORsde-sde.logOR.true), sd.sde=sd(est.logORsde), se.sde=mean(se.logORsde), cov.sde = mean((sde.logOR.true < est.logORsde + qnorm(0.975)*se.logORsde) & (sde.logOR.true > est.logORsde - qnorm(0.975)*se.logORsde)), est.sie=mean(est.logORsie), bias.sie = mean(est.logORsie-sie.logOR.true), sd.sie=sd(est.logORsie), se.sie=mean(se.logORsie), cov.sie = mean((sie.logOR.true < est.logORsie + qnorm(0.975)*se.logORsie) & (sie.logOR.true > est.logORsie - qnorm(0.975)*se.logORsie)), est.oe=mean(est.logORoe), bias.oe = mean(est.logORoe-oe.logOR.true), sd.oe=sd(est.logORoe), se.oe=mean(se.logORoe), cov.oe = mean((oe.logOR.true < est.logORoe + qnorm(0.975)*se.logORoe) & (oe.logOR.true > est.logORoe - qnorm(0.975)*se.logORoe))), by=tar_group]
setwd("~/GitHub/NASH-mediation")
# packages
# ---------------------------------------------------------------------
library(targets)
library(tarchetypes)
thepackages <- c("data.table",
"sl3")
# ---------------------------------------------------------------------
# R functions
# ---------------------------------------------------------------------
tar_source(files=c("R", "functions"))
simulateData(400, alphaY = -1)
data <-simulateData(400, alphaY = -1)
mean(data$Y)
mean(data[RY==0,]$Y)
data <-simulateData(400, alphaY = -1.5)
mean(data[RY==0,]$Y)
mean(data$Y)
data <-simulateData(400, alphaY = -2)
mean(data$Y)
data <-simulateData(400, alphaY = 0)
mean(data$Y)
data <-simulateData(400, alphaY = 0)
data <-simulateData(400, alphaY = 1)
mean(data$Y)
data <-simulateData(400, alphaY = 1)
data <-simulateData(400, alphaY = 1.5)
mean(data$Y)
data <-simulateData(400, alphaY = 2)
mean(data$Y)
values_table3 <- tibble::tibble(n=c(rep(400,8), rep(4000,8)),
alphaY = rep(c(-2.0, -1.5, -1.0, 0.0, 0.5, 1.0, 1.5, 2.0), 2))
values_table3
