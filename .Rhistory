# and covariates (L1, L2) are recorded, and a binary outcome (Y) subject to
# missingness (RY).
#
simulateData <- function(n, # integer (sample size)
betaL1.A=0.75, # numeric (reg coef for effect of A on L_1)
betaM1.A=0.75, # numeric (reg coef for effect of A on M_1)
betaL2.A=1.00, # numeric (reg coef for effect of A on L_2)
betaM2.A=1.00, # numeric (reg coef for effect of A on M_2)
betaY.A=0.75, # numeric (reg coef for effect of A on Y)
betaY.M=0.15, # numeric (reg coef for effect of M_2 on Y)
betaY.AL=0.0, # numeric (reg coef for effect of A M_2 interaction on Y)
betaY.L=-0.15, # numeric (reg coef for effect of L_2  on Y)
alphaY=-1, # numeric (intercept i Y model)
a=NULL,
a.prime=NULL
){
L01 <- rnorm(n, mean = 4, sd = 1)
A <- rbinom(n, 1, 0.5)
if(length(a)>0 & length(a.prime)>0){
C1 <- rep(0, n)
L1 <- rnorm(n, mean = 0.5 + 0.85*L01 + betaL1.A*a , sd = 1)
M1 <- rnorm(n, mean = 2.3 + betaM1.A*a.prime  - 0.2*L1 , sd = 1)
C2 <- rep(0, n)
L2 <- rnorm(n, mean = 0.5 + 0.1*L01+ 0.75*L1 + betaL2.A*a + 0.2*M1, sd = 1)
M2 <- rnorm(n, mean = 0.5 + 0.9*M1 + betaM2.A*a.prime - 0.2*L2, sd = 1)
RY <- rep(1, n)
Y <- rbinom(n, 1, plogis(alphaY + betaY.A*a + betaY.M*M2 + betaY.AL*a*L2 + betaY.L*L2))
}
else{
C1 <- rbinom(n, 1, plogis(-2 - 0.5*A))
L1 <- rnorm(n, mean = 0.5 + 0.85*L01 + betaL1.A*A, sd = 1)
M1 <- rnorm(n, mean = 2.3 + betaM1.A*A - 0.2*L1, sd = 1)
C2 <- rbinom(n, 1, plogis(-2 - 0.5*A - 0.05*M1))
L2 <- rnorm(n, mean = 0.5 + 0.1*L01+ 0.75*L1 + betaL2.A*A + 0.2*M1, sd = 1)
M2 <- rnorm(n, mean = 0.5 + 0.9*M1 + betaM2.A*A - 0.2*L2, sd = 1)
RY <- rbinom(n, 1, plogis(2.5 + 0.2*A + 0.1*M2 - 0.1*L2))
Y <- rbinom(n, 1, plogis(alphaY + betaY.A*A + betaY.M*M2 + betaY.AL*A*L2 + betaY.L*L2))
}
ID=c(1:n)
dat <- data.table::data.table(ID, L01, A=factor(A), C1, L1, M1, C2, L2, M2, RY, Y)
dat[C1==1, C2:=1]
dat[C2==1, RY:=0]
return(dat)
}
data00 <- simulateData(10^6, a =0, a.prime=0)
data11 <- simulateData(10^6, a =1, a.prime=1)
data10 <- simulateData(10^6, a =1, a.prime=0)
te.0 <- data11[, mean(Y)] - data00[, mean(Y)]
sde.0 <-data10[, mean(Y)] - data00[, mean(Y)]
sie.0 <-data11[, mean(Y)] - data10[, mean(Y)]
psi00.0 <-data00[, mean(Y)]
psi10.0 <-data10[, mean(Y)]
psi11.0 <-data11[, mean(Y)]
c(sde.0, sie.0, te.0)
# -----------------------------------------------------------------------------
# Simulation data simple
# -----------------------------------------------------------------------------
# R code:
# simulate data from longitudinal mediation setting with baseline treatment (A),
# follow-up times t=1,2 where possible dropout (C1, C2), mediators (M1, M2)
# and covariates (L1, L2) are recorded, and a binary outcome (Y) subject to
# missingness (RY).
#
simulateData <- function(n, # integer (sample size)
betaL1.A=0.75, # numeric (reg coef for effect of A on L_1)
betaM1.A=0.75, # numeric (reg coef for effect of A on M_1)
betaL2.A=1.00, # numeric (reg coef for effect of A on L_2)
betaM2.A=1.00, # numeric (reg coef for effect of A on M_2)
betaY.A=0.75, # numeric (reg coef for effect of A on Y)
betaY.M=0.25, # numeric (reg coef for effect of M_2 on Y)
betaY.AL=0.0, # numeric (reg coef for effect of A M_2 interaction on Y)
betaY.L=-0.15, # numeric (reg coef for effect of L_2  on Y)
alphaY=-1, # numeric (intercept i Y model)
a=NULL,
a.prime=NULL
){
L01 <- rnorm(n, mean = 4, sd = 1)
A <- rbinom(n, 1, 0.5)
if(length(a)>0 & length(a.prime)>0){
C1 <- rep(0, n)
L1 <- rnorm(n, mean = 0.5 + 0.85*L01 + betaL1.A*a , sd = 1)
M1 <- rnorm(n, mean = 2.3 + betaM1.A*a.prime  - 0.2*L1 , sd = 1)
C2 <- rep(0, n)
L2 <- rnorm(n, mean = 0.5 + 0.1*L01+ 0.75*L1 + betaL2.A*a + 0.2*M1, sd = 1)
M2 <- rnorm(n, mean = 0.5 + 0.9*M1 + betaM2.A*a.prime - 0.2*L2, sd = 1)
RY <- rep(1, n)
Y <- rbinom(n, 1, plogis(alphaY + betaY.A*a + betaY.M*M2 + betaY.AL*a*L2 + betaY.L*L2))
}
else{
C1 <- rbinom(n, 1, plogis(-2 - 0.5*A))
L1 <- rnorm(n, mean = 0.5 + 0.85*L01 + betaL1.A*A, sd = 1)
M1 <- rnorm(n, mean = 2.3 + betaM1.A*A - 0.2*L1, sd = 1)
C2 <- rbinom(n, 1, plogis(-2 - 0.5*A - 0.05*M1))
L2 <- rnorm(n, mean = 0.5 + 0.1*L01+ 0.75*L1 + betaL2.A*A + 0.2*M1, sd = 1)
M2 <- rnorm(n, mean = 0.5 + 0.9*M1 + betaM2.A*A - 0.2*L2, sd = 1)
RY <- rbinom(n, 1, plogis(2.5 + 0.2*A + 0.1*M2 - 0.1*L2))
Y <- rbinom(n, 1, plogis(alphaY + betaY.A*A + betaY.M*M2 + betaY.AL*A*L2 + betaY.L*L2))
}
ID=c(1:n)
dat <- data.table::data.table(ID, L01, A=factor(A), C1, L1, M1, C2, L2, M2, RY, Y)
dat[C1==1, C2:=1]
dat[C2==1, RY:=0]
return(dat)
}
data00 <- simulateData(10^6, a =0, a.prime=0)
data11 <- simulateData(10^6, a =1, a.prime=1)
data10 <- simulateData(10^6, a =1, a.prime=0)
te.0 <- data11[, mean(Y)] - data00[, mean(Y)]
sde.0 <-data10[, mean(Y)] - data00[, mean(Y)]
sie.0 <-data11[, mean(Y)] - data10[, mean(Y)]
psi00.0 <-data00[, mean(Y)]
psi10.0 <-data10[, mean(Y)]
psi11.0 <-data11[, mean(Y)]
c(sde.0, sie.0, te.0)
source("~/Documents/GitHub/NASH-mediation/functions/simulateData.R")
source("~/Documents/GitHub/NASH-mediation/R/theTruth.R")
res <- list()
trueval<- list()
for(i in 1:1000){
data <- simulateData(4000);
fit_bin40 <-fitLTMLE(data, t=c(1,2), L0nodes = c("L01"), Anode = "A", Cnodes = c("C1", "C2"),
Lnodes = c("L1", "L2"), Mnodes = c("M1", "M2"), RYnode = "RY", Ynode = "Y",
Cmodel= list("C1 ~ A", "C2 ~ A + M1"),
Mmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
gmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
RYmodel= "RY ~ A + M2 + L2",
Ymodel="Y ~ A + M2 + L2",
QLmodel= list("QL1 ~ L01 + A", "QL2 ~ L01 + L1 + A + M1"),
a1 = 1, a0 = 0, n_bins = 40);
trueVal <- theTruth(n=10^6,coefM1 = fit_bin40$fitg[[1]]$coefficients, coefM2 = fit_bin40$fitg[[2]]$coefficients,
sdM1 =sd(fit_bin40$fitg[[1]]$residuals) , sdM2 = sd(fit_bin40$fitg[[2]]$residuals))
res[[i]] <- fit_bin40$est
trueval[[i]] <-trueVal
print(i)
}
Res <- matrix(unlist(res), ncol = 16, byrow = TRUE)
Truth <- matrix(unlist(trueval), ncol = 8, byrow = TRUE)
# results sde
mean(na.omit(Res[,1]))
mean(na.omit(Res[,1])-Truth[,4])
sd(Res[,1]); mean(sqrt(Res[,2]))
prop.table(table(Truth[,4] > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & Truth[,4] < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
prop.table(table(sde.0 > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & sde.0 < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
# results sie
mean(na.omit(Res[,3]))
mean(na.omit(Res[,3])-Truth[,5])
sd(Res[,3]); mean(sqrt(Res[, 4]))
prop.table(table(Truth[,5] > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & Truth[,5] < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
prop.table(table(sie.0 > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & sie.0 < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
mean(na.omit(Res[,5]))
mean(na.omit(Res[,5])-Truth[,6])
sd(Res[,5]); mean(sqrt(Res[, 6]))
prop.table(table(Truth[,6] > Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & Truth[,6] < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
prop.table(table(te.0> Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & te.0 < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
# psi11
mean(na.omit(Res[,11]))
mean(na.omit(Res[,11])-Truth[,1])
sd(Res[,11]); mean(sqrt(Res[,12]))
prop.table(table(Truth[,1] > Res[,11] - qnorm(0.975)*sqrt(Res[,12]) & Truth[,1] < Res[,11] + qnorm(0.975)*sqrt(Res[,12])))
#psi01
mean(na.omit(Res[,13]))
mean(na.omit(Res[,13])-Truth[,2])
sd(Res[,13]); mean(sqrt(Res[,14]))
prop.table(table(Truth[,2] > Res[,13] - qnorm(0.975)*sqrt(Res[,14]) & Truth[,2] < Res[,13] + qnorm(0.975)*sqrt(Res[,14])))
#psi00
mean(na.omit(Res[,15]))
mean(na.omit(Res[,15])-Truth[,3])
sd(Res[,15]); mean(sqrt(Res[, 16]))
prop.table(table(Truth[,3] > Res[,15] - qnorm(0.975)*sqrt(Res[,16]) & Truth[,3] < Res[,15] + qnorm(0.975)*sqrt(Res[,16])))
for(i in 26:1000){
data <- simulateData(4000);
fit_bin40 <-fitLTMLE(data, t=c(1,2), L0nodes = c("L01"), Anode = "A", Cnodes = c("C1", "C2"),
Lnodes = c("L1", "L2"), Mnodes = c("M1", "M2"), RYnode = "RY", Ynode = "Y",
Cmodel= list("C1 ~ A", "C2 ~ A + M1"),
Mmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
gmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
RYmodel= "RY ~ A + M2 + L2",
Ymodel="Y ~ A + M2 + L2",
QLmodel= list("QL1 ~ L01 + A", "QL2 ~ L01 + L1 + A + M1"),
a1 = 1, a0 = 0, n_bins = 40);
trueVal <- theTruth(n=10^6,coefM1 = fit_bin40$fitg[[1]]$coefficients, coefM2 = fit_bin40$fitg[[2]]$coefficients,
sdM1 =sd(fit_bin40$fitg[[1]]$residuals) , sdM2 = sd(fit_bin40$fitg[[2]]$residuals))
res[[i]] <- fit_bin40$est
trueval[[i]] <-trueVal
print(i)
}
Res <- matrix(unlist(res), ncol = 16, byrow = TRUE)
Truth <- matrix(unlist(trueval), ncol = 8, byrow = TRUE)
# results sde
mean(na.omit(Res[,1]))
mean(na.omit(Res[,1])-Truth[,4])
sd(Res[,1]); mean(sqrt(Res[,2]))
prop.table(table(Truth[,4] > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & Truth[,4] < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
prop.table(table(sde.0 > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & sde.0 < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
# results sie
mean(na.omit(Res[,3]))
mean(na.omit(Res[,3])-Truth[,5])
sd(Res[,3]); mean(sqrt(Res[, 4]))
prop.table(table(Truth[,5] > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & Truth[,5] < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
prop.table(table(sie.0 > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & sie.0 < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
mean(na.omit(Res[,5]))
mean(na.omit(Res[,5])-Truth[,6])
sd(Res[,5]); mean(sqrt(Res[, 6]))
prop.table(table(Truth[,6] > Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & Truth[,6] < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
prop.table(table(te.0> Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & te.0 < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
# psi11
mean(na.omit(Res[,11]))
mean(na.omit(Res[,11])-Truth[,1])
sd(Res[,11]); mean(sqrt(Res[,12]))
prop.table(table(Truth[,1] > Res[,11] - qnorm(0.975)*sqrt(Res[,12]) & Truth[,1] < Res[,11] + qnorm(0.975)*sqrt(Res[,12])))
#psi01
mean(na.omit(Res[,13]))
mean(na.omit(Res[,13])-Truth[,2])
sd(Res[,13]); mean(sqrt(Res[,14]))
prop.table(table(Truth[,2] > Res[,13] - qnorm(0.975)*sqrt(Res[,14]) & Truth[,2] < Res[,13] + qnorm(0.975)*sqrt(Res[,14])))
#psi00
mean(na.omit(Res[,15]))
mean(na.omit(Res[,15])-Truth[,3])
sd(Res[,15]); mean(sqrt(Res[, 16]))
prop.table(table(Truth[,3] > Res[,15] - qnorm(0.975)*sqrt(Res[,16]) & Truth[,3] < Res[,15] + qnorm(0.975)*sqrt(Res[,16])))
source("~/Documents/GitHub/NASH-mediation/functions/simulateData.R")
source("~/Documents/GitHub/NASH-mediation/R/theTruth.R")
data00 <- simulateData(10^6, a =0, a.prime=0)
data11 <- simulateData(10^6, a =1, a.prime=1)
data10 <- simulateData(10^6, a =1, a.prime=0)
te.0 <- data11[, mean(Y)] - data00[, mean(Y)]
sde.0 <-data10[, mean(Y)] - data00[, mean(Y)]
sie.0 <-data11[, mean(Y)] - data10[, mean(Y)]
psi00.0 <-data00[, mean(Y)]
psi10.0 <-data10[, mean(Y)]
psi11.0 <-data11[, mean(Y)]
c(sde.0, sie.0, te.0)
res <- list()
trueval<- list()
for(i in 1:1000){
data <- simulateData(4000);
fit_bin40 <-fitLTMLE(data, t=c(1,2), L0nodes = c("L01"), Anode = "A", Cnodes = c("C1", "C2"),
Lnodes = c("L1", "L2"), Mnodes = c("M1", "M2"), RYnode = "RY", Ynode = "Y",
Cmodel= list("C1 ~ A", "C2 ~ A + M1"),
Mmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
gmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
RYmodel= "RY ~ A + M2 + L2",
Ymodel="Y ~ A + M2 + L2",
QLmodel= list("QL1 ~ L01 + A", "QL2 ~ L01 + L1 + A + M1"),
a1 = 1, a0 = 0, n_bins = 80);
trueVal <- theTruth(n=10^6,coefM1 = fit_bin40$fitg[[1]]$coefficients, coefM2 = fit_bin40$fitg[[2]]$coefficients,
sdM1 =sd(fit_bin40$fitg[[1]]$residuals) , sdM2 = sd(fit_bin40$fitg[[2]]$residuals))
res[[i]] <- fit_bin40$est
trueval[[i]] <-trueVal
print(i)
}
Res <- matrix(unlist(res), ncol = 16, byrow = TRUE)
Truth <- matrix(unlist(trueval), ncol = 8, byrow = TRUE)
# results sde
mean(na.omit(Res[,1]))
mean(na.omit(Res[,1])-Truth[,4])
sd(Res[,1]); mean(sqrt(Res[,2]))
prop.table(table(Truth[,4] > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & Truth[,4] < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
prop.table(table(sde.0 > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & sde.0 < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
# results sie
mean(na.omit(Res[,3]))
mean(na.omit(Res[,3])-Truth[,5])
sd(Res[,3]); mean(sqrt(Res[, 4]))
prop.table(table(Truth[,5] > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & Truth[,5] < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
prop.table(table(sie.0 > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & sie.0 < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
mean(na.omit(Res[,5]))
mean(na.omit(Res[,5])-Truth[,6])
sd(Res[,5]); mean(sqrt(Res[, 6]))
prop.table(table(Truth[,6] > Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & Truth[,6] < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
prop.table(table(te.0> Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & te.0 < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
# psi11
mean(na.omit(Res[,11]))
mean(na.omit(Res[,11])-Truth[,1])
sd(Res[,11]); mean(sqrt(Res[,12]))
prop.table(table(Truth[,1] > Res[,11] - qnorm(0.975)*sqrt(Res[,12]) & Truth[,1] < Res[,11] + qnorm(0.975)*sqrt(Res[,12])))
#psi01
mean(na.omit(Res[,13]))
mean(na.omit(Res[,13])-Truth[,2])
sd(Res[,13]); mean(sqrt(Res[,14]))
prop.table(table(Truth[,2] > Res[,13] - qnorm(0.975)*sqrt(Res[,14]) & Truth[,2] < Res[,13] + qnorm(0.975)*sqrt(Res[,14])))
#psi00
mean(na.omit(Res[,15]))
mean(na.omit(Res[,15])-Truth[,3])
sd(Res[,15]); mean(sqrt(Res[, 16]))
prop.table(table(Truth[,3] > Res[,15] - qnorm(0.975)*sqrt(Res[,16]) & Truth[,3] < Res[,15] + qnorm(0.975)*sqrt(Res[,16])))
for(i in 17:1000){
data <- simulateData(4000);
fit_bin40 <-fitLTMLE(data, t=c(1,2), L0nodes = c("L01"), Anode = "A", Cnodes = c("C1", "C2"),
Lnodes = c("L1", "L2"), Mnodes = c("M1", "M2"), RYnode = "RY", Ynode = "Y",
Cmodel= list("C1 ~ A", "C2 ~ A + M1"),
Mmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
gmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
RYmodel= "RY ~ A + M2 + L2",
Ymodel="Y ~ A + M2 + L2",
QLmodel= list("QL1 ~ L01 + A", "QL2 ~ L01 + L1 + A + M1"),
a1 = 1, a0 = 0, n_bins = 80);
trueVal <- theTruth(n=10^6,coefM1 = fit_bin40$fitg[[1]]$coefficients, coefM2 = fit_bin40$fitg[[2]]$coefficients,
sdM1 =sd(fit_bin40$fitg[[1]]$residuals) , sdM2 = sd(fit_bin40$fitg[[2]]$residuals))
res[[i]] <- fit_bin40$est
trueval[[i]] <-trueVal
print(i)
}
Res <- matrix(unlist(res), ncol = 16, byrow = TRUE)
Truth <- matrix(unlist(trueval), ncol = 8, byrow = TRUE)
# results sde
mean(na.omit(Res[,1]))
mean(na.omit(Res[,1])-Truth[,4])
sd(Res[,1]); mean(sqrt(Res[,2]))
prop.table(table(Truth[,4] > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & Truth[,4] < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
prop.table(table(sde.0 > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & sde.0 < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
# results sie
mean(na.omit(Res[,3]))
mean(na.omit(Res[,3])-Truth[,5])
sd(Res[,3]); mean(sqrt(Res[, 4]))
prop.table(table(Truth[,5] > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & Truth[,5] < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
prop.table(table(sie.0 > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & sie.0 < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
mean(na.omit(Res[,5]))
mean(na.omit(Res[,5])-Truth[,6])
sd(Res[,5]); mean(sqrt(Res[, 6]))
prop.table(table(Truth[,6] > Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & Truth[,6] < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
prop.table(table(te.0> Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & te.0 < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
# psi11
mean(na.omit(Res[,11]))
mean(na.omit(Res[,11])-Truth[,1])
sd(Res[,11]); mean(sqrt(Res[,12]))
prop.table(table(Truth[,1] > Res[,11] - qnorm(0.975)*sqrt(Res[,12]) & Truth[,1] < Res[,11] + qnorm(0.975)*sqrt(Res[,12])))
#psi01
mean(na.omit(Res[,13]))
mean(na.omit(Res[,13])-Truth[,2])
sd(Res[,13]); mean(sqrt(Res[,14]))
prop.table(table(Truth[,2] > Res[,13] - qnorm(0.975)*sqrt(Res[,14]) & Truth[,2] < Res[,13] + qnorm(0.975)*sqrt(Res[,14])))
#psi00
mean(na.omit(Res[,15]))
mean(na.omit(Res[,15])-Truth[,3])
sd(Res[,15]); mean(sqrt(Res[, 16]))
prop.table(table(Truth[,3] > Res[,15] - qnorm(0.975)*sqrt(Res[,16]) & Truth[,3] < Res[,15] + qnorm(0.975)*sqrt(Res[,16])))
for(i in 47:1000){
data <- simulateData(4000);
fit_bin40 <-fitLTMLE(data, t=c(1,2), L0nodes = c("L01"), Anode = "A", Cnodes = c("C1", "C2"),
Lnodes = c("L1", "L2"), Mnodes = c("M1", "M2"), RYnode = "RY", Ynode = "Y",
Cmodel= list("C1 ~ A", "C2 ~ A + M1"),
Mmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
gmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
RYmodel= "RY ~ A + M2 + L2",
Ymodel="Y ~ A + M2 + L2",
QLmodel= list("QL1 ~ L01 + A", "QL2 ~ L01 + L1 + A + M1"),
a1 = 1, a0 = 0, n_bins = 80);
trueVal <- theTruth(n=10^6,coefM1 = fit_bin40$fitg[[1]]$coefficients, coefM2 = fit_bin40$fitg[[2]]$coefficients,
sdM1 =sd(fit_bin40$fitg[[1]]$residuals) , sdM2 = sd(fit_bin40$fitg[[2]]$residuals))
res[[i]] <- fit_bin40$est
trueval[[i]] <-trueVal
print(i)
}
Res <- matrix(unlist(res), ncol = 16, byrow = TRUE)
Truth <- matrix(unlist(trueval), ncol = 8, byrow = TRUE)
# results sde
mean(na.omit(Res[,1]))
mean(na.omit(Res[,1])-Truth[,4])
sd(Res[,1]); mean(sqrt(Res[,2]))
prop.table(table(Truth[,4] > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & Truth[,4] < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
prop.table(table(sde.0 > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & sde.0 < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
# results sie
mean(na.omit(Res[,3]))
mean(na.omit(Res[,3])-Truth[,5])
sd(Res[,3]); mean(sqrt(Res[, 4]))
prop.table(table(Truth[,5] > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & Truth[,5] < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
prop.table(table(sie.0 > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & sie.0 < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
mean(na.omit(Res[,5]))
mean(na.omit(Res[,5])-Truth[,6])
sd(Res[,5]); mean(sqrt(Res[, 6]))
prop.table(table(Truth[,6] > Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & Truth[,6] < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
prop.table(table(te.0> Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & te.0 < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
for(i in 73:1000){
data <- simulateData(4000);
fit_bin40 <-fitLTMLE(data, t=c(1,2), L0nodes = c("L01"), Anode = "A", Cnodes = c("C1", "C2"),
Lnodes = c("L1", "L2"), Mnodes = c("M1", "M2"), RYnode = "RY", Ynode = "Y",
Cmodel= list("C1 ~ A", "C2 ~ A + M1"),
Mmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
gmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
RYmodel= "RY ~ A + M2 + L2",
Ymodel="Y ~ A + M2 + L2",
QLmodel= list("QL1 ~ L01 + A", "QL2 ~ L01 + L1 + A + M1"),
a1 = 1, a0 = 0, n_bins = 80);
trueVal <- theTruth(n=10^6,coefM1 = fit_bin40$fitg[[1]]$coefficients, coefM2 = fit_bin40$fitg[[2]]$coefficients,
sdM1 =sd(fit_bin40$fitg[[1]]$residuals) , sdM2 = sd(fit_bin40$fitg[[2]]$residuals))
res[[i]] <- fit_bin40$est
trueval[[i]] <-trueVal
print(i)
}
Res <- matrix(unlist(res), ncol = 16, byrow = TRUE)
Truth <- matrix(unlist(trueval), ncol = 8, byrow = TRUE)
# results sde
mean(na.omit(Res[,1]))
mean(na.omit(Res[,1])-Truth[,4])
sd(Res[,1]); mean(sqrt(Res[,2]))
prop.table(table(Truth[,4] > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & Truth[,4] < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
# results sie
mean(na.omit(Res[,3]))
prop.table(table(sde.0 > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & sde.0 < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
# results sie
mean(na.omit(Res[,3]))
mean(na.omit(Res[,3])-Truth[,5])
sd(Res[,3]); mean(sqrt(Res[, 4]))
prop.table(table(Truth[,5] > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & Truth[,5] < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
prop.table(table(sie.0 > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & sie.0 < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
mean(na.omit(Res[,5]))
mean(na.omit(Res[,5])-Truth[,6])
sd(Res[,5]); mean(sqrt(Res[, 6]))
prop.table(table(Truth[,6] > Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & Truth[,6] < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
prop.table(table(te.0> Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & te.0 < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
for(i in 191:1000){
data <- simulateData(4000);
fit_bin40 <-fitLTMLE(data, t=c(1,2), L0nodes = c("L01"), Anode = "A", Cnodes = c("C1", "C2"),
Lnodes = c("L1", "L2"), Mnodes = c("M1", "M2"), RYnode = "RY", Ynode = "Y",
Cmodel= list("C1 ~ A", "C2 ~ A + M1"),
Mmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
gmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
RYmodel= "RY ~ A + M2 + L2",
Ymodel="Y ~ A + M2 + L2",
QLmodel= list("QL1 ~ L01 + A", "QL2 ~ L01 + L1 + A + M1"),
a1 = 1, a0 = 0, n_bins = 80);
trueVal <- theTruth(n=10^6,coefM1 = fit_bin40$fitg[[1]]$coefficients, coefM2 = fit_bin40$fitg[[2]]$coefficients,
sdM1 =sd(fit_bin40$fitg[[1]]$residuals) , sdM2 = sd(fit_bin40$fitg[[2]]$residuals))
res[[i]] <- fit_bin40$est
trueval[[i]] <-trueVal
print(i)
}
Res <- matrix(unlist(res), ncol = 16, byrow = TRUE)
Truth <- matrix(unlist(trueval), ncol = 8, byrow = TRUE)
# results sde
mean(na.omit(Res[,1]))
mean(na.omit(Res[,1])-Truth[,4])
sd(Res[,1]); mean(sqrt(Res[,2]))
prop.table(table(Truth[,4] > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & Truth[,4] < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
prop.table(table(sde.0 > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & sde.0 < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
# results sie
mean(na.omit(Res[,3]))
mean(na.omit(Res[,3])-Truth[,5])
sd(Res[,3]); mean(sqrt(Res[, 4]))
prop.table(table(Truth[,5] > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & Truth[,5] < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
prop.table(table(sie.0 > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & sie.0 < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
mean(na.omit(Res[,5]))
mean(na.omit(Res[,5])-Truth[,6])
sd(Res[,5]); mean(sqrt(Res[, 6]))
prop.table(table(Truth[,6] > Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & Truth[,6] < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
prop.table(table(te.0> Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & te.0 < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
# psi11
mean(na.omit(Res[,11]))
mean(na.omit(Res[,11])-Truth[,1])
sd(Res[,11]); mean(sqrt(Res[,12]))
prop.table(table(Truth[,1] > Res[,11] - qnorm(0.975)*sqrt(Res[,12]) & Truth[,1] < Res[,11] + qnorm(0.975)*sqrt(Res[,12])))
#psi01
mean(na.omit(Res[,13]))
mean(na.omit(Res[,13])-Truth[,2])
sd(Res[,13]); mean(sqrt(Res[,14]))
prop.table(table(Truth[,2] > Res[,13] - qnorm(0.975)*sqrt(Res[,14]) & Truth[,2] < Res[,13] + qnorm(0.975)*sqrt(Res[,14])))
#psi00
mean(na.omit(Res[,15]))
mean(na.omit(Res[,15])-Truth[,3])
sd(Res[,15]); mean(sqrt(Res[, 16]))
prop.table(table(Truth[,3] > Res[,15] - qnorm(0.975)*sqrt(Res[,16]) & Truth[,3] < Res[,15] + qnorm(0.975)*sqrt(Res[,16])))
for(i in 344:1000){
data <- simulateData(4000);
fit_bin40 <-fitLTMLE(data, t=c(1,2), L0nodes = c("L01"), Anode = "A", Cnodes = c("C1", "C2"),
Lnodes = c("L1", "L2"), Mnodes = c("M1", "M2"), RYnode = "RY", Ynode = "Y",
Cmodel= list("C1 ~ A", "C2 ~ A + M1"),
Mmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
gmodel=list("M1 ~ A + L1", "M2 ~ M1 + A + L2"),
RYmodel= "RY ~ A + M2 + L2",
Ymodel="Y ~ A + M2 + L2",
QLmodel= list("QL1 ~ L01 + A", "QL2 ~ L01 + L1 + A + M1"),
a1 = 1, a0 = 0, n_bins = 80);
trueVal <- theTruth(n=10^6,coefM1 = fit_bin40$fitg[[1]]$coefficients, coefM2 = fit_bin40$fitg[[2]]$coefficients,
sdM1 =sd(fit_bin40$fitg[[1]]$residuals) , sdM2 = sd(fit_bin40$fitg[[2]]$residuals))
res[[i]] <- fit_bin40$est
trueval[[i]] <-trueVal
print(i)
}
Res <- matrix(unlist(res), ncol = 16, byrow = TRUE)
Truth <- matrix(unlist(trueval), ncol = 8, byrow = TRUE)
# results sde
mean(na.omit(Res[,1]))
mean(na.omit(Res[,1])-Truth[,4])
sd(Res[,1]); mean(sqrt(Res[,2]))
prop.table(table(Truth[,4] > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & Truth[,4] < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
prop.table(table(sde.0 > Res[,1] - qnorm(0.975)*sqrt(Res[,2]) & sde.0 < Res[,1] + qnorm(0.975)*sqrt(Res[,2])))
# results sie
mean(na.omit(Res[,3]))
mean(na.omit(Res[,3])-Truth[,5])
sd(Res[,3]); mean(sqrt(Res[, 4]))
prop.table(table(Truth[,5] > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & Truth[,5] < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
prop.table(table(sie.0 > Res[,3] - qnorm(0.975)*sqrt(Res[,4]) & sie.0 < Res[,3] + qnorm(0.975)*sqrt(Res[,4])))
mean(na.omit(Res[,5]))
mean(na.omit(Res[,5])-Truth[,6])
sd(Res[,5]); mean(sqrt(Res[, 6]))
prop.table(table(Truth[,6] > Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & Truth[,6] < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
prop.table(table(te.0> Res[,5] - qnorm(0.975)*sqrt(Res[, 6]) & te.0 < Res[,5] + qnorm(0.975)*sqrt(Res[, 6])))
# psi11
mean(na.omit(Res[,11]))
mean(na.omit(Res[,11])-Truth[,1])
sd(Res[,11]); mean(sqrt(Res[,12]))
prop.table(table(Truth[,1] > Res[,11] - qnorm(0.975)*sqrt(Res[,12]) & Truth[,1] < Res[,11] + qnorm(0.975)*sqrt(Res[,12])))
#psi01
mean(na.omit(Res[,13]))
mean(na.omit(Res[,13])-Truth[,2])
sd(Res[,13]); mean(sqrt(Res[,14]))
prop.table(table(Truth[,2] > Res[,13] - qnorm(0.975)*sqrt(Res[,14]) & Truth[,2] < Res[,13] + qnorm(0.975)*sqrt(Res[,14])))
#psi00
mean(na.omit(Res[,15]))
mean(na.omit(Res[,15])-Truth[,3])
sd(Res[,15]); mean(sqrt(Res[, 16]))
prop.table(table(Truth[,3] > Res[,15] - qnorm(0.975)*sqrt(Res[,16]) & Truth[,3] < Res[,15] + qnorm(0.975)*sqrt(Res[,16])))
